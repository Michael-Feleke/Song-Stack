(function (React, designSystem, adminjs) {
  'use strict';

  function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

  var React__default = /*#__PURE__*/_interopDefault(React);

  const MyAvatarComponent = () => {
    const [avatarUrl, setAvatarUrl] = React.useState("");
    const styles = {
      avatarContainer: {
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
        width: "50px",
        height: "50px",
        borderRadius: "50%",
        overflow: "hidden",
        border: "2px solid #ddd",
        backgroundColor: "#f0f0f0"
      },
      avatar: {
        width: "100%",
        height: "100%",
        objectFit: "cover"
      }
    };
    React.useEffect(() => {
      const fetchUser = async () => {
        try {
          const response = await fetch("https://randomuser.me/api/");
          const data = await response.json();
          const imageUrl = data.results[0].picture.large;
          setAvatarUrl(imageUrl);
        } catch (error) {
          console.error("Error fetching the random user image:", error);
        }
      };
      fetchUser();
    }, []);
    return /*#__PURE__*/React__default.default.createElement("div", {
      style: styles.avatarContainer
    }, avatarUrl && /*#__PURE__*/React__default.default.createElement("img", {
      src: avatarUrl,
      alt: "User Avatar",
      style: styles.avatar
    }));
  };

  const PasswordEdit = props => {
    const {
      onChange,
      property,
      record,
      resource
    } = props;
    const {
      translateButton: tb
    } = adminjs.useTranslation();
    const [showPassword, togglePassword] = React.useState(false);
    React.useEffect(() => {
      if (!showPassword) {
        onChange(property.name, '');
      }
    }, [onChange, showPassword]);
    // For new records always show the property
    if (!record.id) {
      return /*#__PURE__*/React__default.default.createElement(adminjs.BasePropertyComponent.Password.Edit, props);
    }
    return /*#__PURE__*/React__default.default.createElement(designSystem.Box, null, showPassword && /*#__PURE__*/React__default.default.createElement(adminjs.BasePropertyComponent.Password.Edit, props), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "xl"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
      textAlign: "center"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
      onClick: () => togglePassword(!showPassword),
      type: "button"
    }, showPassword ? tb('cancel', resource.id) : tb('changePassword', resource.id)))));
  };

  AdminJS.UserComponents = {};
  AdminJS.UserComponents.MyAvatarComponent = MyAvatarComponent;
  AdminJS.UserComponents.PasswordEditComponent = PasswordEdit;

})(React, AdminJSDesignSystem, AdminJS);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
